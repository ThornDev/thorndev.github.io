<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王绵杰的个人博客</title>
  <subtitle>STAY HUNGRY ！ STAY FOOLISH ！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thornvbear.com/"/>
  <updated>2016-11-16T05:22:22.000Z</updated>
  <id>http://thornvbear.com/</id>
  
  <author>
    <name>Thon Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP 笔记整理（二）</title>
    <link href="http://thornvbear.com/2016/10/22/PHP%20%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://thornvbear.com/2016/10/22/PHP 笔记整理（二）/</id>
    <published>2016-10-22T05:42:13.000Z</published>
    <updated>2016-11-16T05:22:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php常用开发库"><a href="#php常用开发库" class="headerlink" title="php常用开发库"></a>php常用开发库</h1><h2 id="图表库"><a href="#图表库" class="headerlink" title="图表库"></a>图表库</h2><p>下面的类库可以让你很简单就能创建复杂的图表和图片。当然，它们需要GD库的支持。</p>
<ul>
<li><a href="http://pchart.sourceforge.net/" target="_blank" rel="external"><strong>pChart</strong></a> - 一个可以创建统计图的库。</li>
<li><a href="https://naku.dohcrew.com/libchart/pages/introduction/" target="_blank" rel="external"><strong>Libchart</strong></a> - 这也是一个简单的统计图库。</li>
<li><a href="http://www.aditus.nu/jpgraph/" target="_blank" rel="external"><strong>JpGraph</strong></a> - 一个面向对象的图片创建类。 </li>
<li><a href="http://teethgrinder.co.uk/open-flash-chart/" target="_blank" rel="external"><strong>Open Flash Chart</strong></a> - 这是一个基于Flash的统计图。</li>
</ul>
<h2 id="RSS-解析"><a href="#RSS-解析" class="headerlink" title="RSS 解析"></a>RSS 解析</h2><p>解释<mark>RSS</mark>并是一件很单调的事情，不过幸好你有下面的类库可以帮助你方便地读取RSS的Feed。</p>
<ul>
<li><a href="http://magpierss.sourceforge.net/" target="_blank" rel="external"><strong>MagpieRSS</strong></a> - 开源的PHP版RSS解析器，据说功能强大，未验证。</li>
<li><a href="http://simplepie.org/" target="_blank" rel="external"><strong>SimplePie</strong></a> - 这是一个非常快速，而且易用的RSS和Atom 解析库。</li>
</ul>
<h2 id="缩略图生成"><a href="#缩略图生成" class="headerlink" title="缩略图生成"></a>缩略图生成</h2><ul>
<li><a href="http://phpthumb.sourceforge.net/" target="_blank" rel="external"><strong>phpThumb</strong></a> - 功能很强大，如何强大还是自己去体会吧。</li>
</ul>
<h2 id="支付"><a href="#支付" class="headerlink" title="支付"></a>支付</h2><p>你的网站需要处理支付方面的事情？需要一个和支付网关的程序？下面这个程序可以帮到你。</p>
<ul>
<li><a href="http://phpfour.com/php-payment-gateway-library-for-paypal-authorizenet-and-2checkout/" target="_blank" rel="external"><strong>PHP Payment Library</strong></a> - 支持Paypal, Authorize.net 和2Checkout (2CO)</li>
</ul>
<h2 id="OpenID"><a href="#OpenID" class="headerlink" title="OpenID"></a>OpenID</h2><ul>
<li><a href="http://www.openidenabled.com/php-openid/" target="_blank" rel="external"><strong>PHP-OpenID</strong></a> - 支持OpenID的一个PHP库。OpenID是帮助你使用相同的用户名和口令登录不同的网站的一种解决方案。如果你对OpenID不熟悉的话，你可以到这里看看：<a href="http://openid.net.cn/" target="_blank" rel="external">http://openid.net.cn/</a></li>
</ul>
<h2 id="数据为抽象-对象关系映射ORM"><a href="#数据为抽象-对象关系映射ORM" class="headerlink" title="数据为抽象/对象关系映射ORM"></a>数据为抽象/对象关系映射ORM</h2><ul>
<li><a href="http://adodb.sourceforge.net/" target="_blank" rel="external"><strong>ADOdb</strong></a> - 数据库抽象</li>
<li><a href="http://www.doctrine-project.org/" target="_blank" rel="external"><strong>Doctrine</strong></a> - 对象关系映射 <code>Object relational mapper (ORM)</code>，需要 <code>PHP 5.2.3+</code> 版本，一个非常强大的<code>database abstraction layer (DBAL)</code>.</li>
<li><a href="http://propel.phpdb.org/trac/" target="_blank" rel="external"><strong>Propel</strong></a> - 对象关系映射框架- PHP5</li>
<li><a href="http://outlet-orm.org/" target="_blank" rel="external"><strong>Outlet</strong></a> - 也是关于对象关系映射的一个工具。</li>
</ul>
<p>注： 对象关系映射（Object Relational Mapping，简称ORM）是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。本质上就是将数据从一种形式转换到另外一种形式。这也同时暗示者额外的执行开销；然而，如果ORM作为一 种中间件实现，则会有很多机会做优化，而这些在手写的持久层并不存在。更重要的是用于控制转换的元数据需要提供和管理；但是同样，这些花费要比维护手写的方案要少；而且就算是遵守ODMG规范的对象数据库依然需要类级别的元数据。</p>
<h2 id="PDF-生成器"><a href="#PDF-生成器" class="headerlink" title="PDF 生成器"></a>PDF 生成器</h2><ul>
<li><a href="http://www.fpdf.org/" target="_blank" rel="external"><strong>FPDF</strong></a> - 这量一个可以让你生成PDF的纯PHP类库。</li>
</ul>
<h2 id="Excel-相关"><a href="#Excel-相关" class="headerlink" title="Excel 相关"></a>Excel 相关</h2><p>你的站点需要生成 Excel？没有问题，下面这两个类库可以让你轻松做到这一点。</p>
<ul>
<li><a href="http://code.google.com/p/php-excel/" target="_blank" rel="external"><strong>php-excel</strong></a> - 这是一个非常简单的Excel文件生成类。</li>
<li><a href="http://code.google.com/p/php-excel-reader/" target="_blank" rel="external"><strong>PHP Excel Reader</strong></a> - 可以解析并读取XLS文件中的数据。</li>
</ul>
<h2 id="E-Mail-相关"><a href="#E-Mail-相关" class="headerlink" title="E-Mail 相关"></a>E-Mail 相关</h2><p>不喜欢PHP的mail函数？觉得不够强大？下面的PHP邮件相关的库绝对不会让你失望。</p>
<ul>
<li><a href="http://swiftmailer.org/" target="_blank" rel="external"><strong>Swift Mailer</strong></a> - 免费的超多功能的PHP邮件库。</li>
<li><a href="http://phpmailer.codeworxtech.com/" target="_blank" rel="external"><strong>PHPMailer</strong></a> - 超强大的邮件发送类。</li>
</ul>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>如果你在使用测试驱动的方法开发你的程序，下面的类库和框架绝你能帮助你的开发。</p>
<ul>
<li><a href="http://www.simpletest.org/" target="_blank" rel="external"><strong>SimpleTest</strong></a> - 一个PHP的单元测试和网页测试的框架。</li>
<li><a href="http://www.phpunit.de/" target="_blank" rel="external"><strong>PHPUnit</strong></a> - 来自xUnit 家族，提供一个框架可以让你方便地进行单元测试的案例开发。并可非常容易地分析其测试结果。</li>
</ul>
<h2 id="PHP-Markdown-解析器"><a href="#PHP-Markdown-解析器" class="headerlink" title="PHP Markdown 解析器"></a>PHP Markdown 解析器</h2><ul>
<li><a href="https://github.com/thephpleague/commonmark" target="_blank" rel="external"><strong>CommonMark</strong></a> - 是基于 CommonMark 规范的 PHP Markdown 解析器。</li>
</ul>
<h1 id="响应式网站的最佳PHP框架"><a href="#响应式网站的最佳PHP框架" class="headerlink" title="响应式网站的最佳PHP框架"></a>响应式网站的最佳PHP框架</h1><p>目前，网上有大量的框架供大家选择，本文分享9款各方面都兼具优势的PHP框架，主要用来构建响应式网站。</p>
<h2 id="Symfony"><a href="#Symfony" class="headerlink" title="Symfony"></a>Symfony</h2><p><a href="https://github.com/symfony" target="_blank" rel="external"><strong>Symfony</strong></a> - 一个开源的PHP框架，它在速度和灵活性方面都兼具优势。它提供了一套解决特定工程问题的概念和工具，帮助广大开发者减少重复性工作。抽象化意味着能用更简洁的东西表达复杂的概念、流程等。</p>
<h2 id="Phalcon"><a href="#Phalcon" class="headerlink" title="Phalcon"></a>Phalcon</h2><p>如果你想提高网站速度，你可以试试<a href="https://phalconphp.com/en/" target="_blank" rel="external"><strong>Phalcon</strong></a>框架。基于C语言开发，也是目前市场上最快的一款PHP框架。 开发者不需要学习和使用C语言功能， 因为所有功能都以PHP类的方式暴露出来，可以直接使用。Phalcon也是松耦合的，可以根据项目的需要任意使用其它对象。</p>
<h2 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h2><p><a href="https://github.com/laravel/laravel" target="_blank" rel="external"><strong>Laravel</strong></a> - 2016年最流行的PHP框架，也是最容易学习的开发框架，开发者只需一个脚本就可以实现一个网站功能。它最强大的特征是具有一个个性化的模板引擎，称作“Blade”，并且在网站上无任何性能开销。</p>
<h2 id="Yii"><a href="#Yii" class="headerlink" title="Yii"></a>Yii</h2><p><a href="http://www.yiiframework.com/" target="_blank" rel="external"><strong>Yii</strong></a> - 一个基于组件、用于开发大型Web应用的高性能PHP框架。Yii几乎提供了今日Web 2.0应用开发所需要的一切功能。Yii是最有效率的PHP框架之一。Yii里面的Gii是一个功能强大的代码生成器，基于网络，开发者使用它可以轻易地生成表单、模块、CRUD、模型等。</p>
<h2 id="CodeIgniter"><a href="#CodeIgniter" class="headerlink" title="CodeIgniter"></a>CodeIgniter</h2><p><a href="http://www.codeigniter.com/" target="_blank" rel="external"><strong>Codeigniter</strong></a> - 一个非常简单且功能全面的Web开发构建包，其体积只有2MB。它提供一套丰富的标准库以及简单的接口和逻辑结构，其目的是使开发人员更快速地进行项目开发。使用CodeIgniter可以减少代码编写量，并将你的精力投入到项目的创造性开发上。</p>
<h2 id="Cake"><a href="#Cake" class="headerlink" title="Cake"></a>Cake</h2><p><a href="https://cakephp.org/" target="_blank" rel="external"><strong>Cake</strong></a> - 一款非常适合商业网站开发的PHP框架，因缺乏YAML或XML文件，所以它无需配置。它提供程序员所需要的基本体系架构，因此程序员可以使用它更快速且不失灵活性地创建网络应用程序。而这就是我们创造CakePHP的首要目的。</p>
<p>CakePHP拥有一个活跃的开发团队和社区，使CakePHP本身更具备应有的价值。另外，使用CakePHP也意味着您的应用程序将更容易测试，也更容易被改良、更新。</p>
<h2 id="ZendPHP"><a href="#ZendPHP" class="headerlink" title="ZendPHP"></a>ZendPHP</h2><p><a href="https://framework.zend.com/" target="_blank" rel="external"><strong>ZendPHP</strong></a> - 已经被各大网站采用，比如BBC、BNP Paribas或Cisco WebEx，所以你可以放心使用该框架。</p>
<p>ZendPHP使用MVC三层架构，并且是一个完全面向对象的框架。组件非常丰富，且组件之间耦合很松散。简单说就是，各组件之间的依赖性非常低，基本上每个组件都可以单独拿出来使用。</p>
<h2 id="FuelPHP"><a href="#FuelPHP" class="headerlink" title="FuelPHP"></a>FuelPHP</h2><p><a href="https://github.com/fuel/fuel" target="_blank" rel="external"><strong>FuelPHP</strong></a> - 一个简单、灵活的PHP 5.3 Web框架，其思路结合了来自主流框架的优点。它也是一个MVC框架，并且支持HMVC。</p>
<h2 id="Slim"><a href="#Slim" class="headerlink" title="Slim"></a>Slim</h2><p><a href="http://www.slimframework.com/" target="_blank" rel="external"><strong>Slim</strong></a> - 一个非常轻量和微小的PHP框架，尽管如此，开发者仍然可以开发出非常强大的Web站点。它具有流线型的路由器、自定义视图呈现的模板渲染功能、安全cookies、flash消息和一个简单的配置过程、HTTP缓存、错误处理等。</p>
<p><strong>未完，继续中。。。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;php常用开发库&quot;&gt;&lt;a href=&quot;#php常用开发库&quot; class=&quot;headerlink&quot; title=&quot;php常用开发库&quot;&gt;&lt;/a&gt;php常用开发库&lt;/h1&gt;&lt;h2 id=&quot;图表库&quot;&gt;&lt;a href=&quot;#图表库&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
    
      <category term="php" scheme="http://thornvbear.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Xcode 8.0姗姗来迟</title>
    <link href="http://thornvbear.com/2016/09/14/xcode8%E5%A7%97%E5%A7%97%E6%9D%A5%E8%BF%9F/"/>
    <id>http://thornvbear.com/2016/09/14/xcode8姗姗来迟/</id>
    <published>2016-09-14T09:46:36.000Z</published>
    <updated>2016-09-17T14:50:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Xcode-8-0-版本"><a href="#Xcode-8-0-版本" class="headerlink" title="Xcode 8.0 版本"></a>Xcode 8.0 版本</h2><ul>
<li>Xcode 8.0GM版本已发布了一段时间，用于新一代的Xcode升级版本，这里普及一个知识：什么是GM版本，GM版是软件开发版本中的最终正式版的母版，不意外发现重大bug的话，GM版＝正式x.0版。Xcode 8.0正式版也于前两天正式发布，显然它是为iOS 10而生的。</li>
<li>Xcode 8.0更新提示：</li>
</ul>
<p><img src="https://dn-thornstep.qbox.me/2016-09-17xcode8.0_update_note.png" alt="Smaller image"></p>
<ul>
<li><p>首先，Xcode 8引入了Swift3.0，加入了更多新的特性，加入了支持iOS 10、watchOS 3、tvOS 10、macOS Sierra的SDK。<br>至于详细的Release Note可以查看<a href="https://developer.apple.com/library/content/releasenotes/DeveloperTools/RN-Xcode/Introduction.html" target="_blank" rel="external">https://developer.apple.com/library/content/releasenotes/DeveloperTools/RN-Xcode/Introduction.html</a></p>
</li>
<li><p>这里也没什么有用的信息，Xcode性能提升，能更好的支持XIB，增加了一些性能提示，更便于开发者进行工作开发，新加入了San Francisco Mono 编辑字体和新的主题，值得一说的是：</p>
<h2 id="证书管理"><a href="#证书管理" class="headerlink" title="证书管理"></a>证书管理</h2><p>  Xcode支持自动管理证书的功能，当然也可以自己设置。<br>  <img src="https://dn-thornstep.qbox.me/2016-09-17_sign_manage_intro.png" alt="Mou image"><br>  不过建议大家勾选这个Automatically manage signing.可以很方便的为我们管理自己的证书。</p>
<h2 id="xib或者storyboard"><a href="#xib或者storyboard" class="headerlink" title="xib或者storyboard"></a>xib或者storyboard</h2></li>
<li><p>1.xib可以更方便的查看你的布局在不同尺寸设备上的显示情况了。</p>
<p>  <img src="https://dn-thornstep.qbox.me/2016-09-17_xib_diff_device.png" alt="image"><br>  可以看到Xcode8.0把设备尺寸设置放在了布局的最下方，而右边里的Attributes Inspector里的尺寸选择取消了，并且我们可以按条件选择要查看的设备，点击<code>vary for traits</code>可以选择width或者height查看。这次可以说苹果很有良心，为这个设计点赞。</p>
</li>
<li><p>2.使用Xcode8打开xib文件后，会出现下图的提示。<br>  <img src="https://dn-thornstep.qbox.me/2016-09-17_xib_change_for_device.jpg" alt="image"></p>
<p>  大家选择Choose Device即可。之后大家会发现布局啊，frame乱了，只需要更新一下frame即可。</p>
<ul>
<li>注意：如果按上面的步骤操作后，在用Xcode7打开Xib会报一下错误</li>
<li><p>解决方法：需要删除xib里的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;capability name=&quot;documents saved in the Xcode 8 format&quot; minToolsVersion=&quot;8.0&quot;/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>以及把&lt; document &gt;中的toolsVersion和&lt; plugIn &gt;中的version改成你正常的xib文件中的值。</p>
</li>
</ul>
</li>
</ul>
<h2 id="代码注释不能用的解决办法"><a href="#代码注释不能用的解决办法" class="headerlink" title="代码注释不能用的解决办法"></a>代码注释不能用的解决办法</h2><ul>
<li><p>这个是因为苹果解决xcode ghost，把插件屏蔽了。</p>
<p>  解决方法</p>
<p>  打开终端，命令运行： sudo /usr/libexec/xpccachectl</p>
<p>  然后必须重启电脑后生效</p>
<p>  Xcode 8.0貌似取消了对插件的支持，因为苹果认为这会带来安全上的问题，并且提交审核会被拒绝，如果大家有什么新的解决办法请回复里告知，如果你对插件依赖性非常严重那么，可以参照<a href="http://vongloo.me/2016/09/10/Make-Your-Xcode8-Great-Again/?utm_source=tuicool&amp;utm_medium=referral&amp;sukey=3997c0719f15    15204f9d2fb0e66acbbbaaa5fd0d4849a108d51f0c9a0cdca5c0a61b68edc24f2f9423a81b60ce6e728c" target="_blank" rel="external">让你的 Xcode8 继续使用插件</a>。</p>
</li>
</ul>
<h2 id="iOS-10隐私权限设置"><a href="#iOS-10隐私权限设置" class="headerlink" title="iOS 10隐私权限设置"></a>iOS 10隐私权限设置</h2><ul>
<li>iOS 10 开始对隐私权限更加严格，如果你不设置就会直接崩溃，现在很多遇到崩溃问题了，一般解决办法都是在info.plist文件添加对应的Key-Value就可以了。</li>
</ul>
<p><img src="https://dn-thornstep.qbox.me/2016-09-17_ios10_private_setting.png" alt="image"><br>如上图显示的是部分权限设置：蓝牙使用权限，日历，相机，通讯录，健康分享，健康更新，后台一直定位，定位许可，使用时定位等权限设置。</p>
<h2 id="Xcode-8-运行一堆没用的logs解决办法"><a href="#Xcode-8-运行一堆没用的logs解决办法" class="headerlink" title="Xcode 8 运行一堆没用的logs解决办法"></a>Xcode 8 运行一堆没用的logs解决办法</h2><p><img src="https://dn-thornstep.qbox.me/2016-09-17_xcode8_print_logs.png" alt="image"><br>上图我们看到，自己新建的一个工程什么也没做直接运行打印了一堆烂七八糟的东西，我觉得这个应该是Xcode 8的问题，打印的东西也没仔细研究，看着是一些项目的状态值，如果不想每次运行都有这些东西可以在Edite Scheme——&gt;Run——&gt;Arguments里设置OS_ACTIVITY_MODE : disable如下图</p>
<p><img src="https://dn-thornstep.qbox.me/2016-09-17_lock_extra_logs.png" alt="image"></p>
<h2 id="iOS-10新特性"><a href="#iOS-10新特性" class="headerlink" title="iOS 10新特性"></a>iOS 10新特性</h2><ul>
<li>Xcode 8 是为iOS 10服务的，所以要了解iOS 10参看：<a href="https://developer.apple.com/library/content/releasenotes/General/WhatsNewIniOS/Articles/iOS10.html#//apple_ref/doc/uid/TP40017084-SW1" target="_blank" rel="external">iOS 10 苹果官方文档</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Xcode-8-0-版本&quot;&gt;&lt;a href=&quot;#Xcode-8-0-版本&quot; class=&quot;headerlink&quot; title=&quot;Xcode 8.0 版本&quot;&gt;&lt;/a&gt;Xcode 8.0 版本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Xcode 8.0GM版本已发布了一段时间，用于
    
    </summary>
    
    
      <category term="Xcode 8.0" scheme="http://thornvbear.com/tags/Xcode-8-0/"/>
    
      <category term="新特性" scheme="http://thornvbear.com/tags/%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>如何把View Controller瘦下来！</title>
    <link href="http://thornvbear.com/2016/08/18/%E5%A6%82%E4%BD%95%E6%8A%8AViewController%E7%98%A6%E4%B8%8B%E6%9D%A5/"/>
    <id>http://thornvbear.com/2016/08/18/如何把ViewController瘦下来/</id>
    <published>2016-08-18T14:49:38.000Z</published>
    <updated>2016-08-25T15:58:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何把View-Controller瘦下来"><a href="#如何把View-Controller瘦下来" class="headerlink" title="如何把View Controller瘦下来"></a>如何把View Controller瘦下来</h1><ul>
<li>有时候View Controller由于做了太多的事情，而变得非常庞大。这里既有数据的收集，又有逻辑的处理，还有各种归属于该View Controller的控件内存分配。这里面哪些可以代理到其他模块呢？这篇博客就是探索项目的架构，目的是分离复杂的代码逻辑，让我们的代码可读性更强。</li>
<li>在View Controller里，这些职责或许是被各种 <code>#pragma mark</code> 分组实现，如果你是这样的话，那么就可以考虑把这些部分拆分到不同的文件里。</li>
</ul>
<h1 id="Data-Source"><a href="#Data-Source" class="headerlink" title="Data Source"></a>Data Source</h1><ul>
<li>Data Source的方式是一种拆离View Controller里数据显示逻辑的方式，尤其是在一些复杂的table views里，这种方式可以有效地从View Controller里分离所有cells的数据显示逻辑。</li>
<li><p>Data Source对象可以遵守<code>UITableViewDataSource</code>协议，以实现数据的显示，但是我发现使用这些对象配置cells是一件可以独立出来的逻辑，所以可以把这部分逻辑也独立出来。下面一个很简单的例子：</p>
<pre><code>@implementation TBSectionedDataSource : NSObject

- (instancetype)initWithObjects:(NSArray *)objects sectioningKey:(NSString *)sectioningKey {
    self = [super init];
    if (!self) return nil;

    [self sectionObjects:objects withKey:sectioningKey];

    return self;
}

- (void)sectionObjects:(NSArray *)objects withKey:(NSString *)sectioningKey {
    self.sectionedObjects = objects //section the objects array
}

- (NSUInteger)numberOfSections {
    return self.sectionedObjects.count;
}

- (NSUInteger)numberOfObjectsInSection:(NSUInteger)section {
    return [self.sectionedObjects[section] count];
}

- (id)objectAtIndexPath:(NSIndexPath *)indexPath {
    return self.sectionedObjects[indexPath.section][indexPath.row];
}

@end
</code></pre></li>
<li><p>这种data source的设计是为了抽象和重用，不要担心你的类仅仅在一个地方使用。从view controller里分离数据显示逻辑是一种管理懒加载的方式。特别是针对一个动态table views来说，这种方式很适合view controller来管理显示数据。</p>
</li>
<li>这种方式也可以管理你的重用逻辑。在这里可以获取服务器端的数据，从而把网络访问模块给分离出去。</li>
<li>如果你的界面是静态的话，那么你可以定制一个data source类用来专门显示这一块。在多个data source的情况下，每一个data source的子类都可以在自己的section里显示。</li>
<li>使用这种方式可以避免很多事情，把数据逻辑拆分的同时还可以把网络访问模块拆出来。</li>
</ul>
<h1 id="Standard-Composition"><a href="#Standard-Composition" class="headerlink" title="Standard Composition"></a>Standard Composition</h1><ul>
<li>这个可以理解为标准化组合，多个View Controller可以使用View Controller容器管理起来，如果你的view controller由多个逻辑单元组成，那么可以把这种复杂的逻辑拆分到多个view controller中。经验表明这种方式适合一个界面有多个table view或者是多个collection view的情况。</li>
<li><p>比如在一个界面上包含一个header和一个网格类型的视图，那么我们可以使用懒加载的方式加载这两个view controller，当系统用到的时候再去加载资源。</p>
<pre><code>- (TBHeaderViewController *)headerViewController {
    if (!_headerViewController) {
        TBHeaderViewController *headerViewController = [[TBHeaderViewController alloc] init];
          [self addChildViewController:headerViewController];
        [headerViewController didMoveToParentViewController:self];

        [self.view addSubview:headerViewController.view];

        self.headerViewController = headerViewController;
        }
        return _headerViewController;
}

- (TBGridViewController *)gridViewController {
    if (!_gridViewController) {
           TBGridViewController *gridViewController = [[TBGridViewController alloc] init];

        [self addChildViewController:gridViewController];
        [gridViewController didMoveToParentViewController:self];

        [self.view addSubview:gridViewController.view];

        self.gridViewController = gridViewController;
    }
    return _gridViewController;
}

- (void)viewDidLayoutSubviews {
    [super viewDidLayoutSubviews];

    CGRect workingRect = self.view.bounds;

    CGRect headerRect = CGRectZero, gridRect = CGRectZero;
    CGRectDivide(workingRect, &amp;headerRect, &amp;gridRect, 44, CGRectMinYEdge);

    self.headerViewController.view.frame = tagHeaderRect;
    self.gridViewController.view.frame = hotSongsGridRect;
}
</code></pre></li>
<li><p>在结果子视图里，其包含的每个collection view，都展示统一的数据类型，这样更便于管理和修改。</p>
<h1 id="Smarter-Views"><a href="#Smarter-Views" class="headerlink" title="Smarter Views"></a>Smarter Views</h1></li>
<li><p>如果你是在view controller类初始化你所有的子视图的话，那么你应该考虑使用更适合自己的View。UIViewController默认使用UIView，不过同样你可以自定义View实现重写。使用<code>-loadView</code>来达到这种效果，在这里你只需要把自定义的View设置给<code>self.view</code>即可。</p>
<pre><code>@implementation TBProfileViewController

- (void)loadView {
    self.view = [[TBProfileView alloc] init];
}

//...

@end

@implementation TBProfileView : NSObject

- (UILabel *)nameLabel {
    if (!_nameLabel) {
        UILabel *nameLabel = [[UILabel alloc] init];
        //configure font, color, etc
        [self addSubview:nameLabel];
            self.nameLabel = nameLabel;
    }
    return _nameLabel;
}

- (UIImageView *)avatarImageView {
    if (!_avatarImageView) {
        UIImageView * avatarImageView = [UIImageView new];
        [self addSubview:avatarImageView];
        self.avatarImageView = avatarImageView;
    }
    return _avatarImageView
}

- (void)layoutSubviews {
    //perform layout
}

@end
</code></pre><h1 id="Presenter"><a href="#Presenter" class="headerlink" title="Presenter"></a>Presenter</h1></li>
<li>Presenter（一系列get方法）是从Model中获取数据并提供给View层，Presenter还负责处理后台任务</li>
<li>主导器一般包含着model对象，这里的model是用来展示的，所以属性都是暴露出来的。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@implementation TBUserPresenter : NSObject</div><div class="line"></div><div class="line">- (instancetype)initWithUser:(TBUser *)user &#123;</div><div class="line">    self = [super init];</div><div class="line">    if (!self) return nil;</div><div class="line">    _user = user;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)name &#123;</div><div class="line">    return self.user.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)followerCountString &#123;</div><div class="line">    if (self.user.followerCount == 0) &#123;</div><div class="line">        return @&quot;&quot;;</div><div class="line">    &#125;</div><div class="line">    return [NSString stringWithFormat:@&quot;%@ followers&quot;, [NSNumberFormatter localizedStringFromNumber:@(_user.followerCount) numberStyle:NSNumberFormatterDecimalStyle]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)followersString &#123;</div><div class="line">    NSMutableString *followersString = [@&quot;Followed by &quot; mutableCopy];</div><div class="line">    [followersString appendString:[self.class.arrayFormatter stringFromArray:[self.user.topFollowers valueForKey:@&quot;name&quot;]];</div><div class="line">    return followersString;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (TTTArrayFormatter*) arrayFormatter &#123;</div><div class="line">    static TTTArrayFormatter *_arrayFormatter;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        _arrayFormatter = [[TTTArrayFormatter alloc] init];</div><div class="line">        _arrayFormatter.usesAbbreviatedConjunction = YES;</div><div class="line">    &#125;);</div><div class="line">    return _arrayFormatter;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<ul>
<li>需要注意的一点是，model对象本身是不暴露出去的。Presenter作为model的看门人，保证了view controller不用避开主逻辑服务，而可以直接访问model层。这种架构减少了依赖性，由于 <code>TBUser</code> 的存在，使得model接触的类比较少，因此如果它改变，则牵涉的逻辑比较少。</li>
</ul>
<h1 id="Binding-pattern"><a href="#Binding-pattern" class="headerlink" title="Binding pattern"></a>Binding pattern</h1><ul>
<li>在形式上，这种可以看做<code>-configureView</code>。当数据层发生改变的时候捆绑形式就会更新view。Cocoa本身就适合这个，因为KVO可以检测到model层的变动，而KVC可以从model层读取数据然后赋给view，两者实现完美结合。第三方库Reactive Cocoa也是采用了这种方式，但它有点太庞大。</li>
<li>这种方式与主导器结合起来效果非常好，一个创建对象来传递值，而另一个去接受然后显示到view上。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@implementation TBProfileBinding : NSObject</div><div class="line"></div><div class="line">- (instancetype)initWithView:(TBProfileView *)view presenter:(TBUserPresenter *)presenter &#123;</div><div class="line">    self = [super init];</div><div class="line">    if (!self) return nil;</div><div class="line">    _view = view;</div><div class="line">    _presenter = presenter;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSDictionary *)bindings &#123;</div><div class="line">    return @&#123;</div><div class="line">              @&quot;name&quot;: @&quot;nameLabel.text&quot;,</div><div class="line">              @&quot;followerCountString&quot;: @&quot;followerCountLabel.text&quot;,</div><div class="line">            &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)updateView &#123;</div><div class="line">    [self.bindings enumerateKeysAndObjectsUsingBlock:^(id presenterKeyPath, id viewKeyPath, BOOL *stop) &#123;</div><div class="line">        id newValue = [self.presenter valueForKeyPath:presenterKeyPath];</div><div class="line">        [self.view setObject:newvalue forKeyPath:viewKeyPath];</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h1 id="interaction-pattern"><a href="#interaction-pattern" class="headerlink" title="interaction pattern"></a>interaction pattern</h1><ul>
<li>有时候View Controller过于庞大会带来很多你意想不到的问题。View Controller的角色是接受用户操作然后更新views和相应的model。如今的交互变得越来越复杂化，并且还造成了很大的代码冗余。</li>
<li>交互常包括很多控件初始化，可选择性的信息输入，和一些事件，比如网络访问和状态改变。其实这种操作的生命周期是可以集成到交互对象里的。下面的例子就是讲button被按下时候的交互事件，但是把交互对象作为action的target，比如：<code>[button addTarget:self.followUserInteraction action:@selector(follow)]</code>也是很不错的。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">@implementation TBProfileViewController</div><div class="line"></div><div class="line">- (void)followButtonTapped:(id)sender &#123;</div><div class="line">    self.followUserInteraction = [[TBFollowUserInteraction alloc] initWithUserToFollow:self.user delegate:self];</div><div class="line">    [self.followUserInteraction follow];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)interactionCompleted:(TBFollowUserInteraction *)interaction &#123;</div><div class="line">    [self.binding updateView];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//...</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation TBFollowUserInteraction : NSObject &lt;UIAlertViewDelegate&gt;</div><div class="line"></div><div class="line">- (instancetype)initWithUserToFollow:user delegate:(id&lt;InteractionDelegate&gt;)delegate &#123;</div><div class="line">    self = [super init];</div><div class="line">    if !(self) return nil;</div><div class="line">    _user = user;</div><div class="line">    _delegate = delegate;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)follow &#123;</div><div class="line">    [[[UIAlertView alloc] initWithTitle:nil</div><div class="line">                                message:@&quot;Are you sure you want to follow this user?&quot;</div><div class="line">                               delegate:self</div><div class="line">                      cancelButtonTitle:@&quot;Cancel&quot;</div><div class="line">                      otherButtonTitles:@&quot;Follow&quot;, nil] show];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex &#123;</div><div class="line">    if  ([alertView buttonTitleAtIndex:buttonIndex] isEqual:@&quot;Follow&quot;]) &#123;</div><div class="line">        [self.user.APIGateway followWithCompletionBlock:^&#123;</div><div class="line">            [self.delegate interactionCompleted:self];</div><div class="line">        &#125;];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="键盘管理"><a href="#键盘管理" class="headerlink" title="键盘管理"></a>键盘管理</h1><ul>
<li>在键盘状态改变后更新视图也是一个需要考虑的点，之前有可能是放在了view controller里，但是这个功能可以很容易被移植到键盘管理对象里。当然有很多键盘管理的例子，然而，如果你觉得他们过于繁杂，可以尝试简单的版本：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">@implementation TBNewPostKeyboardManager : NSObject</div><div class="line"></div><div class="line">- (instancetype)initWithTableView:(UITableView *)tableView &#123;</div><div class="line">    self = [super init];</div><div class="line">    if (!self) return nil;</div><div class="line">    _tableView = tableView;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)beginObservingKeyboard &#123;</div><div class="line">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardDidHide:) name:UIKeyboardDidHideNotification object:nil];</div><div class="line">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillShow:) name:UIKeyboardWillShowNotification object:nil];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)endObservingKeyboard &#123;</div><div class="line">    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardDidHideNotification object:nil];</div><div class="line">    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardWillShowNotification object:nil];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)keyboardWillShow:(NSNotification *)note &#123;</div><div class="line">    CGRect keyboardRect = [[note.userInfo objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue];</div><div class="line"></div><div class="line">    UIEdgeInsets contentInsets = UIEdgeInsetsMake(self.tableView.contentInset.top, 0.0f, CGRectGetHeight(keyboardRect), 0.0f);</div><div class="line">    self.tableView.contentInset = contentInsets;</div><div class="line">    self.tableView.scrollIndicatorInsets = contentInsets;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)keyboardDidHide:(NSNotification *)note &#123;</div><div class="line">    UIEdgeInsets contentInset = UIEdgeInsetsMake(self.tableView.contentInset.top, 0.0f, self.oldBottomContentInset, 0.0f);</div><div class="line">    self.tableView.contentInset = contentInset;</div><div class="line">    self.tableView.scrollIndicatorInsets = contentInset;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<ul>
<li>你可以调用<code>-beginObservingKeyboard</code>和<code>-endObservingKeyboard</code>，从开始<code>-viewDidAppear</code>到结束<code>-viewWillDisappear</code>或者其他适合的地方。</li>
</ul>
<h1 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h1><ul>
<li>界面之间的转场正常情况下是通过<code>-pushViewController:animated:</code>。如果转场变得复杂了，那么可以考虑把这种操作代理到导航栏对象中，尤其在适用于iPhone/iPad通用的app，导航需要改变依赖于栈中的最顶端的size class。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">@protocol TBUserNavigator &lt;NSObject&gt;</div><div class="line"></div><div class="line">- (void)navigateToFollowersForUser:(TBUser *)user;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation TBiPhoneUserNavigator : NSObject&lt;TBUserNavigator&gt;</div><div class="line"></div><div class="line">- (instancetype)initWithNavigationController:(UINavigationController *)navigationController &#123;</div><div class="line">    self = [super init];</div><div class="line">    if (!self) return nil;</div><div class="line">    _navigationController = navigationController;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)navigateToFollowersForUser:(TBUser *)user &#123;</div><div class="line">    TBFollowerListViewController *followerList = [[TBFollowerListViewController alloc] initWithUser:user];</div><div class="line">    [self.navigationController pushViewController:followerList animated:YES];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation TBiPadUserNavigator : NSObject&lt;TBUserNavigator&gt;</div><div class="line"></div><div class="line">- (instancetype)initWithUserViewController:(TBUserViewController *)userViewController &#123;</div><div class="line">    self = [super init];</div><div class="line">    if (!self) return nil;</div><div class="line">    _userViewController = userViewController;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)navigateToFollowersForUser:(TBUser *)user &#123;</div><div class="line">    TBFollowerListViewController *followerList = [[TBFollowerListViewController alloc] initWithUser:user];</div><div class="line">    self.userViewController.supplementalViewController = followerList;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这种方式凸显出了一大好处是，把大的对象拆成了很多小的模块。他们可能会被修改，重写或者是替换。相比那些复杂臃肿的view controller，你可以把导航栏设置为自定义的<code>Navigator</code>。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何把View-Controller瘦下来&quot;&gt;&lt;a href=&quot;#如何把View-Controller瘦下来&quot; class=&quot;headerlink&quot; title=&quot;如何把View Controller瘦下来&quot;&gt;&lt;/a&gt;如何把View Controller瘦下来&lt;/
    
    </summary>
    
    
      <category term="UIView Controller" scheme="http://thornvbear.com/tags/UIView-Controller/"/>
    
      <category term="拆分" scheme="http://thornvbear.com/tags/%E6%8B%86%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>PHP 笔记整理（一）</title>
    <link href="http://thornvbear.com/2016/07/31/PHP%20%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://thornvbear.com/2016/07/31/PHP 笔记整理（一）/</id>
    <published>2016-07-31T12:24:01.000Z</published>
    <updated>2016-11-16T05:22:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP-变量规则"><a href="#PHP-变量规则" class="headerlink" title="PHP 变量规则"></a>PHP 变量规则</h3><ul>
<li>变量以 $ 符号开头，其后是变量的名称</li>
<li>变量名称必须以字母或下划线开头</li>
<li>变量名称不能以数字开头</li>
<li>变量名称只能包含字母数字字符和下划线（A-z、0-9 以及 _）</li>
<li>变量名称对大小写敏感（$y 与 $Y 是两个不同的变量）</li>
</ul>
<p>注释：PHP 变量名称对大小写敏感！</p>
<h3 id="PHP-是一门类型松散的语言"><a href="#PHP-是一门类型松散的语言" class="headerlink" title="PHP 是一门类型松散的语言"></a>PHP 是一门类型松散的语言</h3><ul>
<li>我们不必告知 PHP 变量的数据类型</li>
</ul>
<h3 id="PHP变量作用域"><a href="#PHP变量作用域" class="headerlink" title="PHP变量作用域"></a>PHP变量作用域</h3><h4 id="Local-和-Global-作用域"><a href="#Local-和-Global-作用域" class="headerlink" title="Local 和 Global 作用域"></a>Local 和 Global 作用域</h4><ul>
<li><p>函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。</p>
</li>
<li><p>函数内部声明的变量拥有 LOCAL 作用域，只能在函数内部进行访问。</p>
</li>
</ul>
<h4 id="PHP-global-关键词"><a href="#PHP-global-关键词" class="headerlink" title="PHP global 关键词"></a>PHP global 关键词</h4><p><code>global</code>关键词用于访问函数内的全局变量。</p>
<p>要做到这一点，请在（函数内部）变量前面使用 global 关键词：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">实例</div><div class="line">&lt;?php</div><div class="line">$x=5;</div><div class="line">$y=10;</div><div class="line"></div><div class="line">function myTest() &#123;</div><div class="line">  global $x,$y;</div><div class="line">  $y=$x+$y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">myTest();</div><div class="line">echo $y; // 输出 15</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h4 id="var-dump-会返回变量的数据类型和值"><a href="#var-dump-会返回变量的数据类型和值" class="headerlink" title="var_dump() 会返回变量的数据类型和值"></a>var_dump() 会返回变量的数据类型和值</h4><h3 id="设置-PHP-常量"><a href="#设置-PHP-常量" class="headerlink" title="设置 PHP 常量"></a>设置 PHP 常量</h3><p>如需设置常量，请使用<code>define()</code>函数 - 它使用三个参数：</p>
<ul>
<li>首个参数定义常量的名称</li>
<li>第二个参数定义常量的值</li>
<li>可选的第三个参数规定常量名是否对大小写敏感。默认是 false。</li>
</ul>
<p>下例创建了一个对大小写敏感的常量，值为 “Welcome to W3School.com.cn!”：<br>实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">define(&quot;GREETING&quot;, &quot;Welcome to thornvbear.tech!&quot;);</div><div class="line">echo GREETING;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h4 id="字符串里单引号和双引号的区别"><a href="#字符串里单引号和双引号的区别" class="headerlink" title="字符串里单引号和双引号的区别"></a>字符串里单引号和双引号的区别</h4><ul>
<li>双引号解析变量，单引号不解析变量</li>
<li>单引号执行速率更快</li>
<li>双引号解析所有的转义符，单引号只解析`和\这两种转义符</li>
</ul>
<h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><ul>
<li>$str = 1 + ‘999abc’; 结果为10000；</li>
</ul>
<h4 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h4><ul>
<li>.     串接     $txt1 = “Hello”;  $txt2 = $txt1 . “ world!”     现在 $txt2 包含 “Hello world!”</li>
<li>.=     串接赋值     $txt1 = “Hello”; $txt1 .= “ world!”     现在 $txt1 包含 “Hello world!”</li>
</ul>
<h4 id="foreach-循环"><a href="#foreach-循环" class="headerlink" title="foreach 循环"></a>foreach 循环</h4><p>foreach 循环只适用于数组，并用于遍历数组中的每个键/值对。<br>语法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">foreach ($array as $value) &#123;</div><div class="line">  code to be executed;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每进行一次循环迭代，当前数组元素的值就会被赋值给 $value 变量，并且数组指针会逐一地移动，直到到达最后一个数组元素。</p>
<h4 id="PHP关联数组-即字典-map"><a href="#PHP关联数组-即字典-map" class="headerlink" title="PHP关联数组(即字典 map)"></a>PHP关联数组(即字典 map)</h4><p>关联数组是使用您分配给数组的指定键的数组。</p>
<p>有两种创建关联数组的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$age=array(&quot;Peter&quot;=&gt;&quot;35&quot;,&quot;Ben&quot;=&gt;&quot;37&quot;,&quot;Joe&quot;=&gt;&quot;43&quot;);</div></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$age[&apos;Peter&apos;]=&quot;35&quot;;</div><div class="line">$age[&apos;Ben&apos;]=&quot;37&quot;;</div><div class="line">$age[&apos;Joe&apos;]=&quot;43&quot;;</div></pre></td></tr></table></figure>
<p>随后可以在脚本中使用指定键：<br>实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$age=array(&quot;Bill&quot;=&gt;&quot;35&quot;,&quot;Steve&quot;=&gt;&quot;37&quot;,&quot;Peter&quot;=&gt;&quot;43&quot;);</div><div class="line">echo &quot;Peter is &quot; . $age[&apos;Peter&apos;] . &quot; years old.&quot;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h4 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h4><p>什么是 <code>$_SERVER[&quot;PHP_SELF&quot;]</code>变量？</p>
<p><code>$_SERVER[&quot;PHP_SELF&quot;]</code> 是一种超全局变量，它返回当前执行脚本的文件名。</p>
<p>因此，<code>$_SERVER[&quot;PHP_SELF&quot;]</code>将表单数据发送到页面本身，而不是跳转到另一张页面。这样，用户就能够在表单页面获得错误提示信息。<br>什么是 <code>htmlspecialchars()</code> 函数？</p>
<p><code>htmlspecialchars()</code>函数把特殊字符转换为 HTML 实体。这意味着 &lt; 和 &gt; 之类的 HTML 字符会被替换为 &lt; 和 &gt; 。这样可防止攻击者通过在表单中注入 HTML 或 JavaScript 代码（跨站点脚本攻击）对代码进行利用。</p>
<h3 id="PHP中不同的PHP片段是可以互相使用的-也就是没有片段一说-只是跟jsp很像-哪里使用写哪里"><a href="#PHP中不同的PHP片段是可以互相使用的-也就是没有片段一说-只是跟jsp很像-哪里使用写哪里" class="headerlink" title="PHP中不同的PHP片段是可以互相使用的  也就是没有片段一说  只是跟jsp很像  哪里使用写哪里"></a>PHP中不同的PHP片段是可以互相使用的  也就是没有片段一说  只是跟jsp很像  哪里使用写哪里</h3><hr>
<h3 id="PHP-Date-函数"><a href="#PHP-Date-函数" class="headerlink" title="PHP Date() 函数"></a>PHP Date() 函数</h3><h4 id="获得简单的日期"><a href="#获得简单的日期" class="headerlink" title="获得简单的日期"></a>获得简单的日期</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">语法</div><div class="line"></div><div class="line">date(format,timestamp)</div><div class="line"></div><div class="line">format 	必需。规定时间戳的格式。</div><div class="line">timestamp 	可选。规定时间戳。默认是当前时间和日期。</div></pre></td></tr></table></figure>
<p>date() 函数的格式参数是必需的，它们规定如何格式化日期或时间。</p>
<p>下面列出了一些常用于日期的字符：</p>
<pre><code>d - 表示月里的某天（01-31）
m - 表示月（01-12）
M - 月的英文大写
Y - 表示年（四位数）
1 - 表示周里的某天
</code></pre><p>其他字符，比如 “/“, “.” 或 “-“ 也可被插入字符中，以增加其他格式。</p>
<h4 id="自动版权年份"><a href="#自动版权年份" class="headerlink" title="自动版权年份"></a>自动版权年份</h4><pre><code>© 2010-&lt;?php echo date(&quot;Y&quot;)?&gt;
</code></pre><h4 id="获得简单的时间"><a href="#获得简单的时间" class="headerlink" title="获得简单的时间"></a>获得简单的时间</h4><p>下面是常用于时间的字符：</p>
<pre><code>h - 带有首位零的 12 小时小时格式
i - 带有首位零的分钟
s - 带有首位零的秒（00 -59）
a - 小写的午前和午后（am 或 pm）
</code></pre><h4 id="mktime-创建日期"><a href="#mktime-创建日期" class="headerlink" title="mktime() 创建日期"></a>mktime() 创建日期</h4><p>语法</p>
<pre><code>mktime(hour,minute,second,month,day,year)
</code></pre><p>strtotime() 用字符串来创建日期</p>
<pre><code>strtotime(time,now)

实例
&lt;?php
$d=strtotime(&quot;10:38pm April 15 2015&quot;);
echo &quot;创建日期是 &quot; . date(&quot;Y-m-d h:i:sa&quot;, $d);
?&gt;
</code></pre><h3 id="PHP-include-和-require-语句"><a href="#PHP-include-和-require-语句" class="headerlink" title="PHP include 和 require 语句"></a>PHP include 和 require 语句</h3><p>通过 include 或 require 语句，可以将 PHP 文件的内容插入另一个 PHP 文件（在服务器执行它之前）。</p>
<p>include 和 require 语句是相同的，除了错误处理方面：</p>
<pre><code>require 会生成致命错误（E_COMPILE_ERROR）并停止脚本
include 只生成警告（E_WARNING），并且脚本会继续
</code></pre><p>因此，如果您希望继续执行，并向用户输出结果，即使包含文件已丢失，那么请使用 include。否则，在框架、CMS 或者复杂的 PHP 应用程序编程中，请始终使用 require 向执行流引用关键文件。这有助于提高应用程序的安全性和完整性，在某个关键文件意外丢失的情况下。</p>
<p>语法</p>
<pre><code>include &apos;filename&apos;;
</code></pre><p>或</p>
<pre><code>require &apos;filename&apos;;    
</code></pre><h3 id="PHP-操作文件"><a href="#PHP-操作文件" class="headerlink" title="PHP 操作文件"></a>PHP 操作文件</h3><p>注意：请谨慎操作文件！</p>
<p>当您操作文件时必须非常小心。如果您操作失误，可能会造成非常严重的破坏。常见的错误是：</p>
<ul>
<li>编辑错误的文件</li>
<li>被垃圾数据填满硬盘</li>
<li>意外删除文件内容</li>
</ul>
<h4 id="readfile-函数"><a href="#readfile-函数" class="headerlink" title="readfile() 函数"></a>readfile() 函数</h4><p><code>readfile()</code>函数读取文件，并把它写入输出缓冲。</p>
<h4 id="Open-File-fopen"><a href="#Open-File-fopen" class="headerlink" title="Open File - fopen()"></a>Open File - fopen()</h4><p>打开文件的更好的方法是通过<code>fopen()</code>函数。此函数为您提供比<code>readfile()</code>函数更多的选项。</p>
<p><code>fopen()</code>的第一个参数包含被打开的文件名，第二个参数规定打开文件的模式。如果<code>fopen()</code>函数未能打开指定的文件，下面的例子会生成一段消息：<br>实例</p>
<pre><code>&lt;?php
$myfile = fopen(&quot;webdictionary.txt&quot;, &quot;r&quot;) or die(&quot;Unable to open file!&quot;);
echo fread($myfile,filesize(&quot;webdictionary.txt&quot;));
fclose($myfile);
?&gt;
</code></pre><h4 id="读取文件-fread"><a href="#读取文件-fread" class="headerlink" title="读取文件 - fread()"></a>读取文件 - fread()</h4><p><code>fread()</code>函数读取打开的文件。</p>
<p><code>fread()</code>的第一个参数包含待读取文件的文件名，第二个参数规定待读取的最大字节数。</p>
<h4 id="关闭文件-fclose"><a href="#关闭文件-fclose" class="headerlink" title="关闭文件 - fclose()"></a>关闭文件 - fclose()</h4><p><code>fclose()</code>函数用于关闭打开的文件。</p>
<h4 id="读取单行文件-fgets"><a href="#读取单行文件-fgets" class="headerlink" title="读取单行文件 - fgets()"></a>读取单行文件 - fgets()</h4><p><code>fgets()</code>函数用于从文件读取单行。</p>
<h4 id="检查-End-Of-File-feof"><a href="#检查-End-Of-File-feof" class="headerlink" title="检查 End-Of-File - feof()"></a>检查 End-Of-File - feof()</h4><p><code>feof()</code>函数检查是否已到达<code>&quot;end-of-file&quot; (EOF)</code>。</p>
<p><code>feof()</code>对于遍历未知长度的数据很有用。</p>
<p>下例逐行读取 “webdictionary.txt” 文件，直到<code>end-of-file</code>：</p>
<pre><code>实例

&lt;?php
$myfile = fopen(&quot;webdictionary.txt&quot;, &quot;r&quot;) or die(&quot;Unable to open file!&quot;);
// 输出单行直到 end-of-file
while(!feof($myfile)) {
  echo fgets($myfile) . &quot;&lt;br&gt;&quot;;
}
fclose($myfile);
?&gt;
</code></pre><h4 id="读取单字符-fgetc"><a href="#读取单字符-fgetc" class="headerlink" title="读取单字符 - fgetc()"></a>读取单字符 - fgetc()</h4><p><code>fgetc()</code>函数用于从文件中读取单个字符。</p>
<h4 id="创建文件-fopen"><a href="#创建文件-fopen" class="headerlink" title="创建文件 - fopen()"></a>创建文件 - fopen()</h4><p><code>fopen()</code>函数也用于创建文件。也许有点混乱，但是在 PHP 中，创建文件所用的函数与打开文件的相同。</p>
<p>如果您用 <code>fopen()</code>打开并不存在的文件，此函数会创建文件，假定文件被打开为写入（w）或增加（a）。</p>
<p>文件权限</p>
<p>如果您试图运行这段代码时发生错误，请检查您是否有向硬盘写入信息的 PHP 文件访问权限。</p>
<h4 id="写入文件-fwrite"><a href="#写入文件-fwrite" class="headerlink" title="写入文件 - fwrite()"></a>写入文件 - fwrite()</h4><p><code>fwrite()</code> 函数用于写入文件。</p>
<p><code>fwrite()</code> 的第一个参数包含要写入的文件的文件名，第二个参数是被写的字符串。</p>
<p>下面的例子把姓名写入名为 “newfile.txt” 的新文件中：</p>
<pre><code>实例

&lt;?php
$myfile = fopen(&quot;newfile.txt&quot;, &quot;w&quot;) or die(&quot;Unable to open file!&quot;);
$txt = &quot;Bill Gates\n&quot;;
fwrite($myfile, $txt);
$txt = &quot;Steve Jobs\n&quot;;
fwrite($myfile, $txt);
fclose($myfile);
?&gt;
</code></pre><h3 id="什么是-Cookie？"><a href="#什么是-Cookie？" class="headerlink" title="什么是 Cookie？"></a>什么是 Cookie？</h3><p><code>cookie</code>常用于识别用户。</p>
<p><code>cookie</code> 是服务器留在用户计算机中的小文件。每当相同的计算机通过浏览器请求页面时，它同时会发送 <code>cookie</code>。通过 PHP，您能够创建并取回<code>cookie</code>的值。</p>
<h3 id="PHP-session"><a href="#PHP-session" class="headerlink" title="PHP session"></a>PHP session</h3><p>变量用于存储有关用户会话的信息，或更改用户会话的设置。<code>Session</code> 变量保存的信息是单一用户的，并且可供应用程序中的所有页面使用。</p>
<h4 id="Session-变量"><a href="#Session-变量" class="headerlink" title="Session 变量"></a>Session 变量</h4><p>当您运行一个应用程序时，您会打开它，做些更改，然后关闭它。这很像一次会话。计算机清楚你是谁。它知道你何时启动应用程序，并在何时终止。但是在因特网上，存在一个问题：服务器不知道你是谁以及你做什么，这是由于 HTTP 地址不能维持状态。</p>
<p>通过在服务器上存储用户信息以便随后使用，<code>PHP session</code>解决了这个问题（比如用户名称、购买商品等）。不过，会话信息是临时的，在用户离开网站后将被删除。如果您需要永久储存信息，可以把数据存储在数据库中。</p>
<p><code>Session</code> 的工作机制是：为每个访问者创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 <code>cookie</code> 中，亦或通过 URL 进行传导。</p>
<h4 id="session-start"><a href="#session-start" class="headerlink" title="session_start()"></a>session_start()</h4><p><code>session_start()</code>函数必须位于 <html> 标签之前：</html></p>
<pre><code>&lt;?php session_start(); ?&gt;

&lt;html&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>上面的代码会向服务器注册用户的会话，以便您可以开始保存用户信息，同时会为用户会话分配一个 UID。</p>
<h4 id="存储-Session-变量"><a href="#存储-Session-变量" class="headerlink" title="存储 Session 变量"></a>存储 Session 变量</h4><p>存储和取回 <code>session</code> 变量的正确方法是使用<code>PHP $_SESSION</code> 变量</p>
<h4 id="显示浏览用户数"><a href="#显示浏览用户数" class="headerlink" title="显示浏览用户数"></a>显示浏览用户数</h4><p><code>isset()</code>函数检测是否已设置<code>&quot;views&quot;</code>变量。如果已设置 <code>&quot;views&quot;</code>变量，我们累加计数器。如果 <code>&quot;views&quot;</code>不存在，则我们创建 <code>&quot;views&quot;</code>变量，并把它设置为 1：</p>
<pre><code>&lt;?php
session_start();

if(isset($_SESSION[&apos;views&apos;]))
  $_SESSION[&apos;views&apos;]=$_SESSION[&apos;views&apos;]+1;

else
  $_SESSION[&apos;views&apos;]=1;
echo &quot;Views=&quot;. $_SESSION[&apos;views&apos;];
?&gt;
</code></pre><h4 id="终结-Session"><a href="#终结-Session" class="headerlink" title="终结 Session"></a>终结 Session</h4><p>如果您希望删除某些 <code>session</code>数据，可以使用<code>unset()</code>或<code>session_destroy()</code>函数。</p>
<p><code>unset()</code> 函数用于释放指定的<code>session</code>变量：</p>
<pre><code>&lt;?php
unset($_SESSION[&apos;views&apos;]);
?&gt;

您也可以通过 session_destroy() 函数彻底终结 session：

&lt;?php
session_destroy();
?&gt;
</code></pre><h3 id="PHP-错误处理"><a href="#PHP-错误处理" class="headerlink" title="PHP 错误处理"></a>PHP 错误处理</h3><p>不同的错误处理方法：</p>
<ul>
<li>简单的 “die()” 语句</li>
<li>自定义错误和错误触发器</li>
<li>错误报告</li>
</ul>
<h4 id="die-函数"><a href="#die-函数" class="headerlink" title="die() 函数"></a>die() 函数</h4><p>第一个例子展示了一个打开文本文件的简单脚本：</p>
<pre><code>&lt;?php
$file=fopen(&quot;welcome.txt&quot;,&quot;r&quot;);
?&gt;
</code></pre><p>如果文件不存在，您会获得类似这样的错误：</p>
<pre><code>Warning: fopen(welcome.txt) [function.fopen]: failed to open stream: 
No such file or directory in C:\webfolder\test.php on line 2
</code></pre><p>为了避免用户获得类似上面的错误消息，我们在访问文件之前检测该文件是否存在：</p>
<pre><code>&lt;?php
if(!file_exists(&quot;welcome.txt&quot;))
 {
 die(&quot;File not found&quot;);
 }
else
 {
 $file=fopen(&quot;welcome.txt&quot;,&quot;r&quot;);
 }
?&gt;
</code></pre><p>现在，假如文件不存在，您会得到类似这样的错误消息：</p>
<pre><code>File not found
</code></pre><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>异常（Exception）用于在指定的错误发生时改变脚本的正常流程。</p>
<h4 id="Try-throw-和-catch"><a href="#Try-throw-和-catch" class="headerlink" title="Try, throw 和 catch"></a>Try, throw 和 catch</h4><p>要避免上面例子出现的错误，我们需要创建适当的代码来处理异常。</p>
<p>正确的处理程序应当包括：</p>
<ul>
<li>Try - 使用异常的函数应该位于 “try” 代码块内。如果没有触发异常，则代码将照常继续执行。但是如果异常被触发，会抛出一个异常。</li>
<li>Throw - 这里规定如何触发异常。每一个 “throw” 必须对应至少一个 “catch”</li>
<li>Catch - “catch” 代码块会捕获异常，并创建一个包含异常信息的对象</li>
</ul>
<h4 id="设置顶层异常处理器-（Top-Level-Exception-Handler）"><a href="#设置顶层异常处理器-（Top-Level-Exception-Handler）" class="headerlink" title="设置顶层异常处理器 （Top Level Exception Handler）"></a>设置顶层异常处理器 （Top Level Exception Handler）</h4><p><code>set_exception_handler()</code>函数可设置处理所有未捕获异常的用户定义函数。</p>
<h3 id="PHP-过滤器（Filter）"><a href="#PHP-过滤器（Filter）" class="headerlink" title="PHP 过滤器（Filter）"></a>PHP 过滤器（Filter）</h3><p>PHP 过滤器用于验证和过滤来自非安全来源的数据，比如用户的输入。</p>
<p>什么是外部数据？</p>
<ul>
<li>来自表单的输入数据</li>
<li>Cookies</li>
<li>服务器变量</li>
<li>数据库查询结果</li>
</ul>
<h4 id="函数和过滤器"><a href="#函数和过滤器" class="headerlink" title="函数和过滤器"></a>函数和过滤器</h4><p>如需过滤变量，请使用下面的过滤器函数之一：</p>
<ul>
<li><code>filter_var()</code>- 通过一个指定的过滤器来过滤单一的变量</li>
<li><code>filter_var_array()</code> - 通过相同的或不同的过滤器来过滤多个变量</li>
<li><code>filter_input</code> - 获取一个输入变量，并对它进行过滤</li>
<li><code>filter_input_array</code> - 获取多个输入变量，并通过相同的或不同的过滤器对它们进行过滤</li>
</ul>
<p>在下面的例子中，我们用 <code>filter_var()</code> 函数验证了一个整数：</p>
<pre><code>&lt;?php
$int = 123;

if(!filter_var($int, FILTER_VALIDATE_INT))
 {
 echo(&quot;Integer is not valid&quot;);
 }
else
 {
 echo(&quot;Integer is valid&quot;);
 }
?&gt;
</code></pre><h4 id="Validating-和-Sanitizing"><a href="#Validating-和-Sanitizing" class="headerlink" title="Validating 和 Sanitizing"></a>Validating 和 Sanitizing</h4><p>有两种过滤器：</p>
<p><code>Validating</code> 过滤器：</p>
<ul>
<li>用于验证用户输入</li>
<li>严格的格式规则（比如 URL 或 E-Mail 验证）</li>
<li>如果成功则返回预期的类型，如果失败则返回 FALSE</li>
</ul>
<p><code>Sanitizing</code> 过滤器：</p>
<ul>
<li>用于允许或禁止字符串中指定的字符</li>
<li>无数据格式规则</li>
<li>始终返回字符串</li>
</ul>
<h3 id="Mysql数据库"><a href="#Mysql数据库" class="headerlink" title="Mysql数据库"></a>Mysql数据库</h3><h4 id="连接到一个-MySQL-数据库"><a href="#连接到一个-MySQL-数据库" class="headerlink" title="连接到一个 MySQL 数据库"></a>连接到一个 MySQL 数据库</h4><p>在您能够访问并处理数据库中的数据之前，您必须创建到达数据库的连接。</p>
<p>在 PHP 中，这个任务通过 <code>mysql_connect()</code>函数完成。<br>语法</p>
<pre><code>mysql_connect(servername,username,password);
</code></pre><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p><code>CREATE DATABASE</code> 语句用于在 <code>MySQL</code>中创建数据库。<br>语法</p>
<pre><code>CREATE DATABASE database_name
</code></pre><p>为了让 PHP 执行上面的语句，我们必须使用 <code>mysql_query()</code> 函数。</p>
<pre><code>&lt;?php
$con = mysql_connect(&quot;localhost&quot;,&quot;peter&quot;,&quot;abc123&quot;);
if (!$con)
  {
  die(&apos;Could not connect: &apos; . mysql_error());
  }

if (mysql_query(&quot;CREATE DATABASE my_db&quot;,$con))
  {
  echo &quot;Database created&quot;;
  }
else
  {
  echo &quot;Error creating database: &quot; . mysql_error();
  }

mysql_close($con);
?&gt;
</code></pre><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><p><code>CREATE TABLE</code>用于在 <code>MySQL</code> 中创建数据库表</p>
<p>例子</p>
<p>下面的例子展示了如何创建一个名为<code>&quot;Persons&quot;</code>的表，此表有三列。列名是<code>&quot;FirstName&quot;</code>, <code>&quot;LastName&quot;</code>以及<code>&quot;Age&quot;</code>：</p>
<pre><code>&lt;?php
$con = mysql_connect(&quot;localhost&quot;,&quot;peter&quot;,&quot;abc123&quot;);
if (!$con)
  {
  die(&apos;Could not connect: &apos; . mysql_error());
  }

// Create database
if (mysql_query(&quot;CREATE DATABASE my_db&quot;,$con))
  {
  echo &quot;Database created&quot;;
  }
else
  {
  echo &quot;Error creating database: &quot; . mysql_error();
  }
// Create table in my_db database
mysql_select_db(&quot;my_db&quot;, $con);
$sql = &quot;CREATE TABLE Persons 
(
FirstName varchar(15),
LastName varchar(15),
Age int
)&quot;;
mysql_query($sql,$con);

mysql_close($con);
?&gt;
</code></pre><h4 id="向数据库表插入数据"><a href="#向数据库表插入数据" class="headerlink" title="向数据库表插入数据"></a>向数据库表插入数据</h4><p>INSERT INTO 语句用于向数据库表添加新记录。<br>语法</p>
<pre><code>INSERT INTO table_name
VALUES (value1, value2,....)
</code></pre><p>您还可以规定希望在其中插入数据的列：</p>
<pre><code>INSERT INTO table_name (column1, column2,...)
VALUES (value1, value2,....)
</code></pre><p>实例</p>
<pre><code>&lt;?php
$con = mysql_connect(&quot;localhost&quot;,&quot;peter&quot;,&quot;abc123&quot;);
if (!$con)
  {
  die(&apos;Could not connect: &apos; . mysql_error());
  }

mysql_select_db(&quot;my_db&quot;, $con);

mysql_query(&quot;INSERT INTO Persons (FirstName, LastName, Age) 
VALUES (&apos;Peter&apos;, &apos;Griffin&apos;, &apos;35&apos;)&quot;);

mysql_query(&quot;INSERT INTO Persons (FirstName, LastName, Age) 
VALUES (&apos;Glenn&apos;, &apos;Quagmire&apos;, &apos;33&apos;)&quot;);

mysql_close($con);
?&gt;
</code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>mt_rand($min,$max) 随机数</p>
<p>解决页面乱码：header(content-type:text/html;)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;PHP-变量规则&quot;&gt;&lt;a href=&quot;#PHP-变量规则&quot; class=&quot;headerlink&quot; title=&quot;PHP 变量规则&quot;&gt;&lt;/a&gt;PHP 变量规则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;变量以 $ 符号开头，其后是变量的名称&lt;/li&gt;
&lt;li&gt;变量名称必须以字母或下
    
    </summary>
    
    
      <category term="php" scheme="http://thornvbear.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>写在三周年</title>
    <link href="http://thornvbear.com/2016/07/30/2016%E5%86%99%E5%9C%A8%E4%B8%89%E5%91%A8%E5%B9%B4/"/>
    <id>http://thornvbear.com/2016/07/30/2016写在三周年/</id>
    <published>2016-07-30T10:00:09.000Z</published>
    <updated>2016-08-01T17:19:26.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="test" scheme="http://thornvbear.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>I&#39;m a test page</title>
    <link href="http://thornvbear.com/2016/07/28/Test-page/"/>
    <id>http://thornvbear.com/2016/07/28/Test-page/</id>
    <published>2016-07-28T09:39:13.000Z</published>
    <updated>2016-08-01T14:53:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客搬家了！</title>
    <link href="http://thornvbear.com/2016/07/28/%E6%96%B0%E5%8D%9A%E5%AE%A2%EF%BC%8C%E6%96%B0%E6%B0%94%E8%B1%A1/"/>
    <id>http://thornvbear.com/2016/07/28/新博客，新气象/</id>
    <published>2016-07-28T09:39:13.000Z</published>
    <updated>2016-08-03T14:36:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我的博客之路"><a href="#我的博客之路" class="headerlink" title="我的博客之路"></a>我的博客之路</h2><p><img align="center" src="https://dn-thornstep.qbox.me/2016-07-30_blog_image.png"></p>
<h3 id="CSDN"><a href="#CSDN" class="headerlink" title="CSDN"></a>CSDN</h3><p>如今进入互联网这一行，如果没有自己的博客你都不好意思跟人家聊技术，我在3、4年就开始在CSDN上记录自己的学习过程，那时候之所以在CSDN上建博客，一来是因为方便，再者是没有技术要求。然而久而久之你会发现，这东西已经无法满足我们的要求，丫每次打开博客的时候都下决心要自定义自己的博客，于是乎就有了基于Octopress的博客。<br><a href="http://blog.csdn.net/u014783027" target="_blank" rel="external">CSDN博客</a></p>
<h3 id="Octopress"><a href="#Octopress" class="headerlink" title="Octopress"></a>Octopress</h3><p>那是去年的第一场雪，比前年来的稍晚一些；我在自己的mac上键入疾飞，在克服重重困难之后终于在<a href="https://github.com/" target="_blank" rel="external">github</a>上搭建了属于自己的博客。此博客用了一年之久，然而又久而久之，丫又满足不了我们的要求了。一是因为人懒了，好久没更新了，更重要是提交更新巨慢啊，<code>rake preview</code>之后，喝了一杯咖啡你会发现还有百分之十未完成。这是由于Octopress是基于Ruby的，生成博客文章的速度非常慢，于是我就查找到了代替它的东西<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>。</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>使用Hexo的原因：</p>
<ul>
<li>Hexo和Octopress都是生成静态文件，可以很方便的托管到github和coding上</li>
<li>Hexo是基于Node的，而Node的速度是非常快的</li>
<li>Hexo目前在github上的stars已经超过Octopress，更多的人在维护Hexo</li>
</ul>
<p>配置Hexo的大致过程以及自己踩过的坑：</p>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>要安装Hexo首先要安装<a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>:</p>
<p><strong>入坑1：</strong></p>
<p>当你安装npm的时候会提示你本地没有安装node,然后你去费劲周折安装node，回来再安装npm，觉得这次可以了吧。然后你会发现装不动啊，丫去查资料发现镜像是国外的，又是背墙的悲剧。换<a href="http://npm.taobao.org/" target="_blank" rel="external">淘宝镜像</a>,然后你终于发现在中国还是国产的好（当然核心还是国外的啊）！不过，最近发现NodeJs的安装包默认安装npm，这可方便了很多。</p>
<p>现在如下命令安装 Hexo：</p>
<pre><code>npm install -g hexo-cli
</code></pre><p>如果报用户权限不够就试试sudo，如果提示各种ERR的话就试试：</p>
<pre><code>npm install hexo --no-optional
</code></pre><p>实在不行，重新安装npm。</p>
<h4 id="创建一个新的博客"><a href="#创建一个新的博客" class="headerlink" title="创建一个新的博客"></a>创建一个新的博客</h4><p>接着我们创建一个新的博客目录：</p>
<pre><code>$ hexo init myBlogFolder #本地建文件夹
$ cd myBlogFolder
$ npm install
</code></pre><p>以上命令完成后，会在目标目录生成以下的目录结构：</p>
<pre><code>.
├── _config.yml
├── package.json
├── scaffolds
├── source
|   └── _posts
└── themes
</code></pre><p>之前的hexo会默认在source建很多文件夹，不过最近版的hexo只有一个_posts文件夹，其他需要自己创建。<br>可以看到，hexo的目录非常简单：</p>
<ul>
<li>_config.yml 是博客的配置文件，里面可以配置你的Title，签名，头像等等（ps:配置文件有Key: value的格式，并且冒号后必须有空格）</li>
<li>scaffolds 是博客文章模板。</li>
<li>source 是博客文章目录，你可以在这里添加标签、关于等文件夹便于管理。</li>
<li>themes 存放主题风格文件，默认是landscape，我个人使用的是<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">Next</a>。</li>
</ul>
<h4 id="OK！测试一下："><a href="#OK！测试一下：" class="headerlink" title="OK！测试一下："></a>OK！测试一下：</h4><p>生成博客配置文件</p>
<pre><code>hexo g
</code></pre><p>发布到本地服务器</p>
<pre><code>hexo s
</code></pre><p>访问：<code>localhost:4000</code><br>然后你会看到很朴素的博客就诞生了。</p>
<h4 id="发布到github和coding"><a href="#发布到github和coding" class="headerlink" title="发布到github和coding"></a>发布到github和coding</h4><p>根目录的_config.yml中找到：</p>
<pre><code>deploy:
    type: git
    repo:
    coding: https://git.coding.net/yourcoding/yourcoding.git,coding-pages
    github: https://github.com/yourgithub/yourgithub.github.io.git,master
</code></pre><p><strong>入坑2:</strong></p>
<p>在配置coding的时候，一定要放在coding-pages的分支，不要放在master，因为coding的pages功能默认在coding-pages分支上，当时我就是错设置为master，导致一直404；</p>
<p><strong>入坑3:</strong></p>
<p>在github建repository的时候，github默认每个用户只能建一个pages静态链接库，并且在创建repository时候加上<code>.github.io</code></p>
<h4 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h4><p>如果有需要可以购买属于自己的域名，设置解析域名，海外绑定github的地址，默认绑定coding的地址，这样就可以国内访问coding，国外访问github了。这里如何把github和coding绑定到自己的域名就不说了，网上有很多这方面的资料。</p>
<h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><p>记录学习与生活，希望自己在这一块净土，耕耘并记录自己的未来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;我的博客之路&quot;&gt;&lt;a href=&quot;#我的博客之路&quot; class=&quot;headerlink&quot; title=&quot;我的博客之路&quot;&gt;&lt;/a&gt;我的博客之路&lt;/h2&gt;&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;https://dn-thornstep.qbox.me/
    
    </summary>
    
    
      <category term="hexo" scheme="http://thornvbear.com/tags/hexo/"/>
    
      <category term="博客" scheme="http://thornvbear.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="github" scheme="http://thornvbear.com/tags/github/"/>
    
      <category term="coding" scheme="http://thornvbear.com/tags/coding/"/>
    
  </entry>
  
</feed>
